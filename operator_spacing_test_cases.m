function test_cases = operator_spacing_test_cases()
% Defines test cases for operator spacing in the MATLAB code beautifier.
% Each struct should have:
%   description: char array, brief description of the test.
%   original: char array, the original MATLAB code snippet.
%   expected_spaced: char array, the expected code after SpaceAroundOperators=true.

test_cases = { ...
    % --- Arithmetic Operators ---
    struct(...
        'description', 'Simple addition', ...
        'original',    'a+b', ...
        'expected_spaced', 'a + b' ...
    ), ...
    struct(...
        'description', 'Simple subtraction', ...
        'original',    'c-d', ...
        'expected_spaced', 'c - d' ...
    ), ...
    struct(...
        'description', 'Simple multiplication', ...
        'original',    'e*f', ...
        'expected_spaced', 'e * f' ...
    ), ...
    struct(...
        'description', 'Simple right division', ...
        'original',    'g/h', ...
        'expected_spaced', 'g / h' ...
    ), ...
    struct(...
        'description', 'Simple left division', ...
        'original',    'i\\j', ...
        'expected_spaced', 'i \\ j' ...
    ), ...
    struct(...
        'description', 'Simple power', ...
        'original',    'k^l', ...
        'expected_spaced', 'k ^ l' ...
    ), ...
    struct(...
        'description', 'Element-wise multiplication', ...
        'original',    'A.*B', ...
        'expected_spaced', 'A .* B' ...
    ), ...
    struct(...
        'description', 'Element-wise right division', ...
        'original',    'C./D', ...
        'expected_spaced', 'C ./ D' ...
    ), ...
    struct(...
        'description', 'Element-wise left division', ...
        'original',    'E.\\F', ...
        'expected_spaced', 'E .\\ F' ...
    ), ...
    struct(...
        'description', 'Element-wise power', ...
        'original',    'G.^H', ...
        'expected_spaced', 'G .^ H' ...
    ), ...
    struct(...
        'description', 'Multiple arithmetic operators', ...
        'original',    'a+b*c-d/e^f', ...
        'expected_spaced', 'a + b * c - d / e ^ f' ...
    ), ...
    struct(...
        'description', 'Arithmetic with numbers', ...
        'original',    '1+2*3.0-4/5.5', ...
        'expected_spaced', '1 + 2 * 3.0 - 4 / 5.5' ...
    ), ...
    struct(...
        'description', 'Unary minus (number)', ...
        'original',    'x=-5', ...
        'expected_spaced', 'x = -5' ...
    ), ...
    struct(...
        'description', 'Unary plus (number)', ...
        'original',    'y=+3', ...
        'expected_spaced', 'y = +3' ...
    ), ...
    struct(...
        'description', 'Unary minus (variable)', ...
        'original',    'z=-a', ...
        'expected_spaced', 'z = -a' ...
    ), ...
    struct(...
        'description', 'Unary plus (variable)', ...
        'original',    'k=+b', ...
        'expected_spaced', 'k = +b' ...
    ), ...
    struct(...
        'description', 'Unary minus in function call', ...
        'original',    'plot(-x)', ...
        'expected_spaced', 'plot(-x)' ...
    ), ...
    struct(...
        'description', 'Unary plus in expression', ...
        'original',    'val = data(+idx)', ...
        'expected_spaced', 'val = data(+idx)' ...
    ), ...
    struct(...
        'description', 'Scientific notation (e-)', ...
        'original',    'num=1e-5', ...
        'expected_spaced', 'num = 1e-5' ...
    ), ...
    struct(...
        'description', 'Scientific notation (e+)', ...
        'original',    'val=1.2e+10', ...
        'expected_spaced', 'val = 1.2e+10' ...
    ), ...
     struct(...
        'description', 'Scientific notation (E-)', ...
        'original',    'num=1E-5', ...
        'expected_spaced', 'num = 1E-5' ...
    ), ...
    struct(...
        'description', 'Scientific notation (E+)', ...
        'original',    'val=1.2E+10', ...
        'expected_spaced', 'val = 1.2E+10' ...
    ), ...
    struct(...
        'description', 'Arithmetic with unary and binary minus', ...
        'original',    'a = -b-c', ...
        'expected_spaced', 'a = -b - c' ...
    ), ...
    struct(...
        'description', 'Arithmetic with operator at start of line (after indent)', ...
        'original',    '  +b-c', ...
        'expected_spaced', '  +b - c' ...
    ), ...
    struct(...
        'description', 'Consecutive unary operators', ...
        'original',    'x = --5', ...
        'expected_spaced', 'x = --5' ... % Assuming no change as it's valid MATLAB
    ), ...
    struct(...
        'description', 'Consecutive unary operators with variable', ...
        'original',    'x = --y', ...
        'expected_spaced', 'x = --y' ... 
    ), ...
    struct(...
        'description', 'Complex expression with unary and binary', ...
        'original',    'res=(-a+b)*-c./+d', ...
        'expected_spaced', 'res = (-a + b) * -c ./ +d' ...
    ), ...
    
    % --- Relational Operators ---
    struct(...
        'description', 'Equals comparison', ...
        'original',    'a==b', ...
        'expected_spaced', 'a == b' ...
    ), ...
    struct(...
        'description', 'Not equals comparison', ...
        'original',    'c~=d', ...
        'expected_spaced', 'c ~= d' ...
    ), ...
    struct(...
        'description', 'Less than comparison', ...
        'original',    'e<f', ...
        'expected_spaced', 'e < f' ...
    ), ...
    struct(...
        'description', 'Greater than comparison', ...
        'original',    'g>h', ...
        'expected_spaced', 'g > h' ...
    ), ...
    struct(...
        'description', 'Less than or equals comparison', ...
        'original',    'i<=j', ...
        'expected_spaced', 'i <= j' ...
    ), ...
    struct(...
        'description', 'Greater than or equals comparison', ...
        'original',    'k>=l', ...
        'expected_spaced', 'k >= l' ...
    ), ...
    struct(...
        'description', 'Comparison with numbers', ...
        'original',    'x<10 && y>=0.5', ...
        'expected_spaced', 'x < 10 && y >= 0.5' ...
    ), ...

    % --- Logical Operators ---
    struct(...
        'description', 'Logical AND (short-circuit)', ...
        'original',    'cond1&&cond2', ...
        'expected_spaced', 'cond1 && cond2' ...
    ), ...
    struct(...
        'description', 'Logical OR (short-circuit)', ...
        'original',    'condA||condB', ...
        'expected_spaced', 'condA || condB' ...
    ), ...
    struct(...
        'description', 'Logical AND (element-wise)', ...
        'original',    'matrixA&matrixB', ...
        'expected_spaced', 'matrixA & matrixB' ...
    ), ...
    struct(...
        'description', 'Logical OR (element-wise)', ...
        'original',    'vectorP|vectorQ', ...
        'expected_spaced', 'vectorP | vectorQ' ...
    ), ...
    struct(...
        'description', 'Mixed logical operators', ...
        'original',    '(a>b && c<d) || (e~=f & g==h)', ...
        'expected_spaced', '(a > b && c < d) || (e ~= f & g == h)' ...
    ), ...

    % --- Assignment Operator ---
    struct(...
        'description', 'Simple assignment', ...
        'original',    'variable=value', ...
        'expected_spaced', 'variable = value' ...
    ), ...
    struct(...
        'description', 'Assignment to array element', ...
        'original',    'array(1)=10', ...
        'expected_spaced', 'array(1) = 10' ...
    ), ...
    struct(...
        'description', 'Assignment involving expression', ...
        'original',    'result=a+b*c', ...
        'expected_spaced', 'result = a + b * c' ...
    ), ...

    % --- Colon Operator (typically NOT spaced in these contexts) ---
    struct(...
        'description', 'Colon for series generation', ...
        'original',    'x=1:5', ...
        'expected_spaced', 'x = 1:5' ... % Expect no change around colon
    ), ...
    struct(...
        'description', 'Colon for series with step', ...
        'original',    'y=0:0.1:1', ...
        'expected_spaced', 'y = 0:0.1:1' ... % Expect no change around colons
    ), ...
    struct(...
        'description', 'Colon for indexing (all elements)', ...
        'original',    'A(:,1)', ...
        'expected_spaced', 'A(:,1)' ... % Expect no change around colon
    ), ...
    struct(...
        'description', 'Colon for indexing (range)', ...
        'original',    'B(1:end,start_idx:end_idx)', ...
        'expected_spaced', 'B(1:end,start_idx:end_idx)' ... % Expect no change
    ), ...
     struct(...
        'description', 'Colon in for loop', ...
        'original',    'for k=1:10', ...
        'expected_spaced', 'for k = 1:10' ... % Space around =, not around :
    ), ...

    % --- Transpose Operators (no space before) ---
    struct(...
        'description', 'Matrix transpose', ...
        'original',    'M_transpose = M'';', ...
        'expected_spaced', 'M_transpose = M'';' ...
    ), ...
    struct(...
        'description', 'Vector non-conjugate transpose', ...
        'original',    'V_transpose = V.'';', ...
        'expected_spaced', 'V_transpose = V.'';' ...
    ), ...
    struct(...
        'description', 'Transpose within expression', ...
        'original',    'res = V''*M + B.'';', ...
        'expected_spaced', 'res = V'' * M + B.'';' ...
    ), ...

    % --- Operators within parentheses, brackets, and braces ---
    struct(...
        'description', 'Operators in parentheses', ...
        'original',    'x=(a+b)*(c-d)', ...
        'expected_spaced', 'x = (a + b) * (c - d)' ...
    ), ...
    struct(...
        'description', 'Operators in brackets', ...
        'original',    'arr=[1+2, 3-4]', ...
        'expected_spaced', 'arr = [1 + 2, 3 - 4]' ... % Comma spacing is separate option
    ), ...
    struct(...
        'description', 'Operators in braces (cell array)', ...
        'original',    'C={@()func(a*b), data(1+x)}', ...
        'expected_spaced', 'C = {@()func(a * b), data(1 + x)}' ...
    ), ...

    % --- No extra spaces if already correctly spaced ---
    struct(...
        'description', 'Already correctly spaced simple assignment', ...
        'original',    'a = b;', ...
        'expected_spaced', 'a = b;' ...
    ), ...
    struct(...
        'description', 'Already correctly spaced complex expression', ...
        'original',    'result = (x + y) / (z - 5);', ...
        'expected_spaced', 'result = (x + y) / (z - 5);' ...
    ), ...
    struct(...
        'description', 'Already correctly spaced with unary', ...
        'original',    'val = -10 + +5;', ...
        'expected_spaced', 'val = -10 + +5;' ...
    ), ...

    % --- Matrix Definitions ---
    struct(...
        'description', 'Matrix definition with expressions', ...
        'original',    'M=[1+2, 3-4; 5*6, 7/8]', ...
        'expected_spaced', 'M = [1 + 2, 3 - 4; 5 * 6, 7 / 8]' ...
    ), ...
    struct(...
        'description', 'Matrix with mixed spacing initially', ...
        'original',    'N=[a+b,c - d;e*f,g/ h]', ...
        'expected_spaced', 'N = [a + b,c - d;e * f,g / h]' ...
    ), ...

    % --- Function Calls with Expressions as Arguments ---
    struct(...
        'description', 'Function call with expressions', ...
        'original',    'myFunc(a+b,c*d,e/2)', ...
        'expected_spaced', 'myFunc(a + b,c * d,e / 2)' ...
    ), ...
    struct(...
        'description', 'Function call with comparisons', ...
        'original',    'anotherFunc(x==y, z~=0)', ...
        'expected_spaced', 'anotherFunc(x == y, z ~= 0)' ...
    ), ...

    % --- Dot Notation (no space around '.') ---
    struct(...
        'description', 'Struct property access and assignment', ...
        'original',    'myStruct.property=1', ...
        'expected_spaced', 'myStruct.property = 1' ...
    ), ...
    struct(...
        'description', 'Object method call', ...
        'original',    'myObj.method(arg1+arg2)', ...
        'expected_spaced', 'myObj.method(arg1 + arg2)' ...
    ), ...
    struct(...
        'description', 'Chained property access', ...
        'original',    'data.sub.field=val-5', ...
        'expected_spaced', 'data.sub.field = val - 5' ...
    ), ...
    struct(...
        'description', 'Element-wise ops with dot property', ...
        'original',    'output = myStruct.array.*scaleFactor - myStruct.offset', ...
        'expected_spaced', 'output = myStruct.array .* scaleFactor - myStruct.offset' ...
    ), ...

    % --- Edge Cases and Mixed Scenarios ---
    struct(...
        'description', 'Operators at start/end of line (hypothetical, usually indented)', ...
        'original',    '=val', ... % This is invalid MATLAB syntax if at true start
        'expected_spaced', '=val' ... % Beautifier should ideally not break invalid code further, or space if it's ` var =val`
    ), ...
    struct(...
        'description', 'Operators with minimal spaces', ...
        'original',    'a=b+c*d-e/f', ...
        'expected_spaced', 'a = b + c * d - e / f' ...
    ), ...
    struct(...
        'description', 'Operators with excessive spaces', ...
        'original',    'a  =  b  +  c * d  -  e / f', ...
        'expected_spaced', 'a = b + c * d - e / f' ...
    ), ...
    struct(...
        'description', 'Mixed operators and functions', ...
        'original',    'if (isvalid(obj)&&obj.Value>threshold_val*calc_factor(2))', ...
        'expected_spaced', 'if (isvalid(obj) && obj.Value > threshold_val * calc_factor(2))' ...
    ), ...
    struct(...
        'description', 'Power followed by unary minus', ...
        'original',    'x = a^-1', ...
        'expected_spaced', 'x = a ^ -1' ... % Standard spacing for this
    ), ...
    struct(...
        'description', 'Multiple assignments and operators', ...
        'original',    'a=1;b=a+2;c=a+b*3;', ...
        'expected_spaced', 'a = 1;b = a + 2;c = a + b * 3;' ...
    ), ...
    struct(...
        'description', 'No space around = within ==, <=, >=, ~=', ...
        'original',    'a==b; c<=d; e>=f; g~=h;', ...
        'expected_spaced', 'a == b; c <= d; e >= f; g ~= h;' ...
    ), ...
    struct(...
        'description', 'Handle .`+` and similar (hypothetical non-standard operators)', ...
        'original',    'a.+b', ...
        'expected_spaced', 'a .+ b' ... % Assuming `.+` is treated as a single op if defined
    ), ...
    struct(...
        'description', 'Dot followed by operator, not element-wise', ...
        'original',    'obj.-property', ... % This is likely syntax error or specific object behavior
        'expected_spaced', 'obj.-property' ... % Should probably not add space if .- is not an operator
    ), ...
    struct(...
        'description', 'Equality check with unary minus on right', ...
        'original',    'a == -b', ...
        'expected_spaced', 'a == -b' ...
    ), ...
    struct(...
        'description', 'Equality check with unary plus on right', ...
        'original',    'a == +b', ...
        'expected_spaced', 'a == +b' ...
    ), ...
    struct(...
        'description', 'Assignment with unary minus on right and spaces', ...
        'original',    'x =  -  b', ...
        'expected_spaced', 'x = -b' ...
    ), ...
    struct(...
        'description', 'Expression with `...` line continuation', ...
        'original',    'longVar = firstPart+... secondPart-thirdPart;', ...
        'expected_spaced', 'longVar = firstPart + ... secondPart - thirdPart;' ...
    ), ...
    struct(...
        'description', 'Operators near `...` line continuation', ...
        'original',    'res = myVal*... \n factor;', ...
        'expected_spaced', 'res = myVal * ... \n factor;' ...
    ) ...
};

end
